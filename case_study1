CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255),
    password VARCHAR(255),
    
);



CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    name VARCHAR(255),
    price DECIMAL(10, 2),
    description TEXT,
    stockQuantity INT
);

CREATE TABLE Cart (
    cart_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_price DECIMAL(10, 2),
    shipping_address VARCHAR(255),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Order_Items (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);


INSERT INTO Products (product_id, name, price, description, stockQuantity)
VALUES
    (1, 'Laptop', 800.00, 'High-performance', 10),
    (2, 'Smartphone', 600.00, 'Latest smartphone', 15),
    (3, 'Tablet', 300.00, 'Portable tablet', 20),
    (4, 'Headphone', 150.00, 'Noise-canceling', 30),
    (5, 'TV 4K', 900.00, 'Smart TV', 5),
    (6, 'Coffee Maker', 50.00, 'Automatic coffee maker', 25),
    (7, 'Refrigerator', 700.00, 'Countertop microwave', 10),
    (8, 'Microwave Oven', 80.00, 'High-speed blender', 15),
    (9, 'Blender', 70.00, 'Bagless vacuum cleaner', 20),
    (10, 'Vacuum Cleaner', 120.00, 'Vacuum Cleaner', 10);
    
    
    
INSERT INTO Customers (customer_id, name, email, address)
VALUES
    (1, 'John Doe', 'johndoe@example.com', '123 Main St, City'),
    (2, 'Jane Smith', 'janesmith@example.com', '456 Elm St, Town'),
    (3, 'Robert Johnson', 'robert@example.com', '789 Oak St, Village'),
    (4, 'Sarah Brown', 'sarah@example.com', '101 Pine St, Suburb'),
    (5, 'David Lee', 'david@example.com', '234 Cedar St, District'),
    (6, 'Laura Hall', 'laura@example.com', '567 Birch St, County'),
    (7, 'Michael Davis', 'michael@example.com', '890 Maple St, State'),
    (8, 'Emma Wilson', 'emma@example.com', '321 Redwood St, Country'),
    (9, 'William Taylor', 'william@example.com', '432 Spruce St, Province'),
    (10, 'Olivia Adams', 'olivia@example.com', '765 Fir St, Territory');
    
    
    ALTER TABLE customers ADD COLUMN address VARCHAR(255);
    
    
INSERT INTO cart (cart_id, customer_id, product_id, quantity)
VALUES
    (1, 1, 1, 2),
    (2, 1, 3, 1),
    (3, 2, 2, 3),
    (4, 3, 4, 4),
    (5, 3, 5, 2),
    (6, 4, 6, 1),
    (7, 5, 1, 1),
    (8, 6, 10, 2),
    (9, 6, 9, 3),
    (10, 7, 7, 2);


INSERT INTO orders (order_id, customer_id, order_date, total_price, shipping_address)
VALUES
    (1, 1, '2023-01-05', 1200, '123 Main St, City'),
    (2, 2, '2023-02-10', 900, '456 Elm St, Town'),
    (3, 3, '2023-03-15', 300, '789 Oak St, Village'),
    (4, 4, '2023-04-20', 150, '101 Pine St, Suburb'),
    (5, 5, '2023-05-25', 1800, '234 Cedar St, District'),
    (6, 6, '2023-06-30', 400, '567 Birch St, County'),
    (7, 7, '2023-07-05', 700, '890 Maple St, State'),
    (8, 8, '2023-08-10', 160, '321 Redwood St, Country'),
    (9, 9, '2023-09-15', 140, '432 Spruce St, Province'),
    (10, 10, '2023-10-20', 1400, '765 Fir St, Territory');
    
    
INSERT INTO order_items (order_item_id, order_id, product_id, quantity)
VALUES
    (1, 1, 1, 2),
    (2, 1, 3, 1),
    (3, 2, 2, 3),
    (4, 3, 5, 2),
    (5, 4, 4, 4),
    (6, 4, 6, 1),
    (7, 5, 1, 1),
    (8, 5, 2, 2),
    (9, 6, 10, 2),
    (10, 6, 9, 3);
---
UPDATE Products
SET price = 800.00
WHERE product_id = 7;


----
DELETE FROM Cart
WHERE customer_id =2;

-----
SELECT *
FROM Products
WHERE price < 100.00;


-----
SELECT *
FROM Products
WHERE stockQuantity > 5;


------
SELECT *
FROM Orders
WHERE total_price BETWEEN 500 AND 1000;


-------
SELECT name
FROM Products
WHERE name LIKE '%r'

---
SELECT *
FROM Cart
WHERE customer_id = 5;


----888
SELECT DISTINCT c.* FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE YEAR(o.order_date) = 2023;

----99

SELECT product_id, MIN(stockQuantity) AS min_stock FROM products GROUP BY product_id;

-------10
SELECT 
    c.customer_id,
    c.name,
    SUM(oi.quantity * p.price) AS total_spent
FROM 
    Customers c
JOIN 
    Orders o ON c.customer_id = o.customer_id
JOIN 
    Order_Items oi ON o.order_id = oi.order_id
JOIN 
    Products p ON oi.product_id = p.product_id
GROUP BY 
    c.customer_id, c.name;
    
    
    -----11
    SELECT c.customer_id, c.name, AVG(o.total_price) AS avg_order_amount FROM  Customers c JOIN  Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name;

----12
SELECT customer_id, COUNT(*) AS num_orders FROM Orders GROUP BY customer_id;

----13
SELECT  c.customer_id,c.name,MAX(o.total_price) AS max_order_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name;

---14

SELECT 
    c.customer_id,
    c.name
FROM 
    Customers c
JOIN 
    Orders o ON c.customer_id = o.customer_id
GROUP BY 
    c.customer_id, c.name
HAVING 
    SUM(o.total_price) > 1000;
    
    ----15
SELECT * FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Cart);

---16
SELECT * FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT customer_id FROM Orders);

--17 error
SELECT product_id, name, (total_price / (SELECT SUM(total_price) FROM orders)) * 100 AS revenue_percentage
FROM products;

----18
SELECT *
FROM Products
WHERE stockQuantity < (
    SELECT MIN(stockQuantity)
    FROM Products
);

---19
SELECT *
FROM Customers
WHERE customer_id IN (
    SELECT customer_id
    FROM Orders
    WHERE total_price > 1000
);



















